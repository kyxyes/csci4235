Index: content/browser/compositor/io_surface_layer_mac.mm
diff --git a/content/browser/compositor/io_surface_layer_mac.mm b/content/browser/compositor/io_surface_layer_mac.mm
index 357c65e2054dae50a22fb69bd22650f394921874..ebf1302ebd04704281f43584c596284eb1fe5790 100644
--- a/content/browser/compositor/io_surface_layer_mac.mm
+++ b/content/browser/compositor/io_surface_layer_mac.mm
@@ -8,6 +8,7 @@
 #include <OpenGL/CGLIOSurface.h>
 #include <OpenGL/CGLRenderers.h>
 #include <OpenGL/gl.h>
+#include <OpenGL/gl.h>
 #include <OpenGL/OpenGL.h>
 
 #include "base/mac/mac_util.h"
@@ -19,6 +20,7 @@
 #include "ui/base/cocoa/animation_utils.h"
 #include "ui/gfx/size_conversions.h"
 #include "ui/gl/gpu_switching_manager.h"
+#include "ui/gl/scoped_cgl.h"
 
 ////////////////////////////////////////////////////////////////////////////////
 // IOSurfaceLayerHelper
Index: extensions/browser/api/widget/widget_api.cc
diff --git a/extensions/browser/api/widget/widget_api.cc b/extensions/browser/api/widget/widget_api.cc
new file mode 100644
index 0000000000000000000000000000000000000000..9b7f66b115586d2ab858adbe30141f92eb622e1a
--- /dev/null
+++ b/extensions/browser/api/widget/widget_api.cc
@@ -0,0 +1,53 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "extensions/browser/api/widget/widget_api.h"
+
+#include "base/sys_info.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/browser_list.h"
+#include "chrome/browser/ui/tabs/tab_strip_model.h"
+
+namespace extensions {
+
+WidgetGetWindowsFunction::WidgetGetWindowsFunction() {
+}
+
+WidgetGetWindowsFunction::~WidgetGetWindowsFunction() {
+}
+
+AsyncExtensionFunction::ResponseAction WidgetGetWindowsFunction::Run() {
+  // Dummy dictionary.
+  base::DictionaryValue* result = new base::DictionaryValue();
+  result->SetInteger("id", 0);
+
+  base::ListValue* browser_list_ret = new base::ListValue();
+  browser_list_ret->Append(result);
+  return RespondNow(OneArgument(browser_list_ret));
+}
+
+WidgetGetTabsForWindowFunction::WidgetGetTabsForWindowFunction() {
+}
+
+WidgetGetTabsForWindowFunction::~WidgetGetTabsForWindowFunction() {
+}
+
+AsyncExtensionFunction::ResponseAction WidgetGetTabsForWindowFunction::Run() {
+//  scoped_ptr<core_api::widget::GetTabsForWindow::Params> params(
+//      core_api::widget::GetTabsForWindow::Params::Create(*args_));
+//  EXTENSION_FUNCTION_VALIDATE(params.get());
+//  const core_api::widget::Window& window = params->window;
+
+  // Dummy dictionary, search for window with |window.id|.
+  base::DictionaryValue* result = new base::DictionaryValue();
+  result->SetString("title", "");
+  result->SetString("url", "");
+  result->SetBoolean("isSelected", false);
+
+  base::ListValue* tab_list_ret = new base::ListValue();
+  tab_list_ret->Append(result);
+  return RespondNow(OneArgument(tab_list_ret));
+}
+
+}  // namespace extensions
Index: extensions/browser/api/widget/widget_api.h
diff --git a/extensions/browser/api/widget/widget_api.h b/extensions/browser/api/widget/widget_api.h
new file mode 100644
index 0000000000000000000000000000000000000000..b32bb33da46acbfdcb60b8fa1f4d94afe6c20393
--- /dev/null
+++ b/extensions/browser/api/widget/widget_api.h
@@ -0,0 +1,36 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef EXTENSIONS_BROWSER_API_WIDGET_WIDGET_API_H_
+#define EXTENSIONS_BROWSER_API_WIDGET_WIDGET_API_H_
+
+#include "chrome/browser/extensions/chrome_extension_function.h"
+#include "extensions/browser/extension_function.h"
+#include "extensions/common/api/widget.h"
+
+namespace extensions {
+
+class WidgetGetWindowsFunction : public ChromeUIThreadExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("widget.getWindows", WIDGET_GETWINDOWS)
+  WidgetGetWindowsFunction();
+
+ private:
+  virtual ~WidgetGetWindowsFunction();
+  virtual AsyncExtensionFunction::ResponseAction Run() OVERRIDE;
+};
+
+class WidgetGetTabsForWindowFunction : public ChromeUIThreadExtensionFunction {
+ public:
+  DECLARE_EXTENSION_FUNCTION("widget.getTabsForWindow", WIDGET_GETTABSFORWINDOW)
+  WidgetGetTabsForWindowFunction();
+
+ private:
+  virtual ~WidgetGetTabsForWindowFunction();
+  virtual AsyncExtensionFunction::ResponseAction Run() OVERRIDE;
+};
+
+}  // namespace extensions
+
+#endif  // EXTENSIONS_BROWSER_API_WIDGET_WIDGET_API_H_
Index: extensions/browser/extension_function_histogram_value.h
diff --git a/extensions/browser/extension_function_histogram_value.h b/extensions/browser/extension_function_histogram_value.h
index ee7491fcbf65a86272d078cea6fd9a55d4dcd584..e8d11b586ac99d0e93ac0c2168fdcb85ffbec639 100644
--- a/extensions/browser/extension_function_histogram_value.h
+++ b/extensions/browser/extension_function_histogram_value.h
@@ -957,6 +957,8 @@ enum HistogramValue {
   EASYUNLOCKPRIVATE_GETUSERINFO,
   HOTWORDPRIVATE_GETLAUNCHSTATE,
   HOTWORDPRIVATE_SETHOTWORDALWAYSONSEARCHENABLED,
+  WIDGET_GETWINDOWS,
+  WIDGET_GETTABSFORWINDOW,
   // Last entry: Add new entries above and ensure to update
   // tools/metrics/histograms/histograms.xml.
   ENUM_BOUNDARY
Index: extensions/common/api/_api_features.json
diff --git a/extensions/common/api/_api_features.json b/extensions/common/api/_api_features.json
index 10702fba593449d8f0020bf851e6464e390fa6a8..da6e97f3687982bd1385eb2e24ac28961515296c 100644
--- a/extensions/common/api/_api_features.json
+++ b/extensions/common/api/_api_features.json
@@ -254,5 +254,9 @@
     "channel": "dev",
     "contexts": ["webui"],
     "matches": ["chrome://chrome-signin/*"]
-  }]
+  }],
+  "widget": {
+    "dependencies": ["permission:widget"],
+    "contexts": ["blessed_extension"]
+  }
 }
Index: extensions/common/api/_permission_features.json
diff --git a/extensions/common/api/_permission_features.json b/extensions/common/api/_permission_features.json
index 83b7b2b57f34d01300c25c2d80d7c5669e1eecd4..0462da822df2506634de18730ecb068f1c492978 100644
--- a/extensions/common/api/_permission_features.json
+++ b/extensions/common/api/_permission_features.json
@@ -293,5 +293,9 @@
         "D519188F86D9ACCEE0412007B227D9936EB9676B"  // GAIA Component Extension
       ]
     }
-  ]
+  ],
+  "widget": {
+    "channel": "dev",
+    "extension_types": ["extension", "platform_app"]
+  }
 }
Index: extensions/common/api/schemas.gypi
diff --git a/extensions/common/api/schemas.gypi b/extensions/common/api/schemas.gypi
index e28edf9a9c18d82266accfbed89261089eb40f1a..c6a7d11cd177f1229cfff3492ea45e16aaed19c7 100644
--- a/extensions/common/api/schemas.gypi
+++ b/extensions/common/api/schemas.gypi
@@ -44,6 +44,7 @@
       'usb_private.idl',
       'web_request.json',
       'web_view_internal.json',
+      'widget.idl',
     ],
     'non_compiled_schema_files': [
     ],
Index: extensions/common/api/widget.idl
diff --git a/extensions/common/api/widget.idl b/extensions/common/api/widget.idl
new file mode 100644
index 0000000000000000000000000000000000000000..f1121aded7b60326d8fb18441d0fc4c89bd53d77
--- /dev/null
+++ b/extensions/common/api/widget.idl
@@ -0,0 +1,25 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Use the <code>chrome.widget</code> API to query whatever.
+namespace widget {
+
+  dictionary Window {
+    long id;
+  };
+
+  dictionary Tab {
+    DOMString title;
+    DOMString url;
+    boolean isSelected;
+  };
+
+  callback WindowCallback = void (Window[] windows);
+  callback TabsForWindowCallback = void (Tab[] tabs);
+
+  interface Functions {
+    static void getWindows(WindowCallback callback);
+    static void getTabsForWindow(Window window, TabsForWindowCallback callback);
+  };
+};
Index: extensions/common/permissions/api_permission.h
diff --git a/extensions/common/permissions/api_permission.h b/extensions/common/permissions/api_permission.h
index e7b76da53346b18e7da4feb9728b8ebc64a40261..5d4f96f7051d4638051c329fe9eb593c2fda8094 100644
--- a/extensions/common/permissions/api_permission.h
+++ b/extensions/common/permissions/api_permission.h
@@ -180,6 +180,7 @@ class APIPermission {
     kWebrtcLoggingPrivate,
     kWebstorePrivate,
     kWebView,
+    kWidget,
     kWindowShape,
     kScreenlockPrivate,
     kSystemCpu,
Index: extensions/common/permissions/extensions_api_permissions.cc
diff --git a/extensions/common/permissions/extensions_api_permissions.cc b/extensions/common/permissions/extensions_api_permissions.cc
index 498990ce3949ee878ea84ef615b213068b7a1bae..cd7e68ed62cda2c778f4a9e4a79becd69a06469b 100644
--- a/extensions/common/permissions/extensions_api_permissions.cc
+++ b/extensions/common/permissions/extensions_api_permissions.cc
@@ -79,6 +79,7 @@ std::vector<APIPermissionInfo*> ExtensionsAPIPermissions::GetAllPermissions()
        PermissionMessage::kWebConnectable},
       {APIPermission::kWebView, "webview",
        APIPermissionInfo::kFlagCannotBeOptional},
+      {APIPermission::kWidget, "widget"},
       {APIPermission::kWindowShape, "app.window.shape"},
   };
 
Index: extensions/extensions.gyp
diff --git a/extensions/extensions.gyp b/extensions/extensions.gyp
index 94cc3c469312ae07b50241cc328f2ebf57f7bfdc..93864ae2eba263f6f8728b1ff38a77068517b510 100644
--- a/extensions/extensions.gyp
+++ b/extensions/extensions.gyp
@@ -487,6 +487,8 @@
         'browser/api/system_storage/storage_info_provider.h',
         'browser/api/system_storage/system_storage_api.cc',
         'browser/api/system_storage/system_storage_api.h',
+        'browser/api/widget/widget_api.cc',
+        'browser/api/widget/widget_api.h',
         'browser/api/test/test_api.cc',
         'browser/api/test/test_api.h',
         'browser/api/usb/usb_api.cc',
